generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id                String   @id
  name              String
  description       String
  category          String
  owner             String
  pricePerCall      Float
  endpoint          String
  metadataHash      String
  verificationLevel Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isActive          Boolean  @default(true)

  // Relations
  proofs         Proof[]
  dependencies   AgentDependency[] @relation("DependentAgent")
  dependents     AgentDependency[] @relation("DependsOnAgent")
  executions     Execution[]
  revenueShares  RevenueShare[]

  @@map("agents")
}

model Proof {
  id         String   @id @default(cuid())
  agentId    String
  proofType  String   // quality, ethics, compliance, custom
  proofHash  String
  verifiedAt DateTime @default(now())
  isValid    Boolean  @default(true)

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("proofs")
}

model AgentDependency {
  id              String @id @default(cuid())
  agentId         String
  dependsOnAgentId String

  agent      Agent @relation("DependentAgent", fields: [agentId], references: [id], onDelete: Cascade)
  dependsOn  Agent @relation("DependsOnAgent", fields: [dependsOnAgentId], references: [id], onDelete: Cascade)

  @@unique([agentId, dependsOnAgentId])
  @@map("agent_dependencies")
}

model Execution {
  id            String   @id @default(cuid())
  agentId       String
  requestHash   String
  responseHash  String
  latency       Int      // milliseconds
  computeUnits  Int
  proofGenTime  Int      // milliseconds
  paymentAmount Float?
  executedAt    DateTime @default(now())

  agent Agent @relation(fields: [agentId], references: [id])

  @@map("executions")
}

model RevenueShare {
  id         String @id @default(cuid())
  agentId    String
  recipient  String
  percentage Int    // 0-100
  shareType  String // developer, trainer, platform, proof_creator

  agent Agent @relation(fields: [agentId], references: [id])

  @@map("revenue_shares")
}

model ProofInheritance {
  id              String   @id @default(cuid())
  fromAgentId     String
  toAgentId       String
  proofHash       String
  royaltyRate     Float    // 0.0-1.0
  inheritedAt     DateTime @default(now())

  @@map("proof_inheritances")
}

---
// apps/registry-api/prisma/migrations/001_init.sql
-- CreateTable
CREATE TABLE "agents" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "category" TEXT NOT NULL,
    "owner" TEXT NOT NULL,
    "pricePerCall" DOUBLE PRECISION NOT NULL,
    "endpoint" TEXT NOT NULL,
    "metadataHash" TEXT NOT NULL,
    "verificationLevel" INTEGER NOT NULL DEFAULT 0,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    "isActive" BOOLEAN NOT NULL DEFAULT true,

    CONSTRAINT "agents_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "proofs" (
    "id" TEXT NOT NULL,
    "agentId" TEXT NOT NULL,
    "proofType" TEXT NOT NULL,
    "proofHash" TEXT NOT NULL,
    "verifiedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "isValid" BOOLEAN NOT NULL DEFAULT true,

    CONSTRAINT "proofs_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "agent_dependencies" (
    "id" TEXT NOT NULL,
    "agentId" TEXT NOT NULL,
    "dependsOnAgentId" TEXT NOT NULL,

    CONSTRAINT "agent_dependencies_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "executions" (
    "id" TEXT NOT NULL,
    "agentId" TEXT NOT NULL,
    "requestHash" TEXT NOT NULL,
    "responseHash" TEXT NOT NULL,
    "latency" INTEGER NOT NULL,
    "computeUnits" INTEGER NOT NULL,
    "proofGenTime" INTEGER NOT NULL,
    "paymentAmount" DOUBLE PRECISION,
    "executedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "executions_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "revenue_shares" (
    "id" TEXT NOT NULL,
    "agentId" TEXT NOT NULL,
    "recipient" TEXT NOT NULL,
    "percentage" INTEGER NOT NULL,
    "shareType" TEXT NOT NULL,

    CONSTRAINT "revenue_shares_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "proof_inheritances" (
    "id" TEXT NOT NULL,
    "fromAgentId" TEXT NOT NULL,
    "toAgentId" TEXT NOT NULL,
    "proofHash" TEXT NOT NULL,
    "royaltyRate" DOUBLE PRECISION NOT NULL,
    "inheritedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "proof_inheritances_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "agent_dependencies_agentId_dependsOnAgentId_key" ON "agent_dependencies"("agentId", "dependsOnAgentId");

-- AddForeignKey
ALTER TABLE "proofs" ADD CONSTRAINT "proofs_agentId_fkey" FOREIGN KEY ("agentId") REFERENCES "agents"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "agent_dependencies" ADD CONSTRAINT "agent_dependencies_agentId_fkey" FOREIGN KEY ("agentId") REFERENCES "agents"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "agent_dependencies" ADD CONSTRAINT "agent_dependencies_dependsOnAgentId_fkey" FOREIGN KEY ("dependsOnAgentId") REFERENCES "agents"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "executions" ADD CONSTRAINT "executions_agentId_fkey" FOREIGN KEY ("agentId") REFERENCES "agents"("id") ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "revenue_shares" ADD CONSTRAINT "revenue_shares_agentId_fkey" FOREIGN KEY ("agentId") REFERENCES "agents"("id") ON UPDATE CASCADE;